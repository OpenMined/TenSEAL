name: Tests

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  Linter:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.8]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: .github/workflows/scripts/install_req_ubuntu.sh
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 --config=.flake8 .
          black --check tenseal/ tests/python/
          # exit-zero treats all errors as warnings.
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      - name: Lint with clang-format
        run: |
          # lint files (all .cpp and .h files) inplace
          find ./tenseal/  \( -iname *.h -o -iname *.cpp \) | xargs clang-format -i -style='file'
          find ./tests/  \( -iname *.h -o -iname *.cpp \) | xargs clang-format -i -style='file'
          # print changes
          git diff
          # already well formated if 'git diff' doesn't output
          ! ( git diff |  grep -q ^ ) || return 1

  TenSEAL:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies Ubuntu
        run: .github/workflows/scripts/install_req_ubuntu.sh
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - name: Install dependencies MacOS
        run: .github/workflows/scripts/install_req_macos.sh
        if: ${{ matrix.os == 'macos-latest' }}
      - name: Install dependencies Windows
        run: .github/workflows/scripts/install_req_windows.bat
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Install dependencies Windows - msbuild
        uses: microsoft/setup-msbuild@v1.0.0
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Build the library for Ubuntu/MacOS
        run: .github/workflows/scripts/build_nix.sh
        if: ${{ matrix.os != 'windows-latest' }}
      - name: Build the library for Windows
        run: .github/workflows/scripts/build_windows.bat
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Test with pytest
        run: pytest -v ./tests/python/tenseal
      - name: Test with gtest for Ubuntu/MacOS
        run: .github/workflows/scripts/run_gtest_nix.sh
        if: ${{ matrix.os != 'windows-latest' }}
      - name: Test with gtest for Windows
        run: .github/workflows/scripts/run_gtest_windows.bat
        if: ${{ matrix.os == 'windows-latest' }}

  SEAL_API:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies Ubuntu
        run: .github/workflows/scripts/install_req_ubuntu.sh
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - name: Install dependencies MacOS
        run: .github/workflows/scripts/install_req_macos.sh
        if: ${{ matrix.os == 'macos-latest' }}
      - name: Install dependencies Windows
        run: .github/workflows/scripts/install_req_windows.bat
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Install dependencies Windows - msbuild
        uses: microsoft/setup-msbuild@v1.0.0
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Build the library for Ubuntu/MacOS
        run: .github/workflows/scripts/build_nix.sh
        if: ${{ matrix.os != 'windows-latest' }}
      - name: Build the library for Windows
        run: .github/workflows/scripts/build_windows.bat
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Test with pytest
        run: pytest -v ./tests/python/sealapi
